#+TITLE: Conforguration
#+AUTHOR: William Denton
#+EMAIL: wtd@pobox.com

# This is under the GPL v3.  See COPYING for details.

Use the power of [[http://orgmode.org/][Org]] to configure accounts and servers.

This is a short example of using Org to configure a machine to download and compile [[https://r-project.org/][R]] from source, in ~/usr/local/src/R/~, arrange symlinks so there will be a constant path to the binary across version changes, install a set of preferred packages, and if necessary edit your ~/.bashrc~ so that your $PATH is proper.

Run ~M-x org-babel-tangle~ to generate shell scripts in the ~scripts/~ directory.  Sync the scripts to remote servers, then run the scripts on those remote servers.

The nice things about this is that locally you can just use ~C-c C-c~ on the shell blocks to execute them, or you can run the scripts at the command line.

* Setup

Make the ~scripts/~ directory on this machine.  (Doing this at the start is easier than using ~:mkdirp yes~ on the tangled blocks.)

#+BEGIN_SRC shell :results silent
mkdir -p scripts
#+END_SRC

* R

** Requirements

The first line of requirements may be needed for R 3.3.  The ~topicmodels~ package requires the GNU Scientific Library.  Once done, this doesn't need to be run again.  Sync and run the script on machines as necessary.

#+BEGIN_SRC shell :tangle scripts/r-install-requirements.sh :shebang "#!/bin/bash"
sudo apt-get install libbz2-dev liblzma-dev libpcre3-dev fonts-inconsolata
sudo apt-get install libgsl0-dev
#+END_SRC

** Set up PATH

#+BEGIN_SRC shell :tangle scripts/r-update-bashrc.sh :shebang "#!/bin/bash"
if ! [[ ":$PATH:" == *":/usr/local/src/R:"* ]]; then
  echo 'Adding /usr/local/src/R to $PATH'
  echo '# Running R from source in /usr/local/src/R' >> ~/.bashrc
  echo 'PATH=$PATH:/usr/local/src/R' >> ~/.bashrc
else
  echo "/usr/local/src/R is already in $PATH"
fi
#+END_SRC

** Installing

Change the version number on this script as needed.

#+BEGIN_SRC shell :tangle scripts/r-install-from-source.sh :shebang "#!/bin/bash"
cd /usr/local/src/R
VERSION=3.3.0
curl -O http://cran.utstat.utoronto.ca/src/base/R-3/R-$VERSION.tar.gz
tar xzvf R-$VERSION.tar.gz
cd R-$VERSION
./configure
make && make check
cd ..
rm R Rscript
ln -s R-$VERSION/bin/R R
ln -s R-$VERSION/bin/Rscript Rscript
PACKAGE_LIST="dplyr readr tidyr ggplot2 devtools lubridate shiny knitr ggvis seriation igraph arules arulesViz tm wordcloud cluster fpc topicmodels"
for PKG in $PACKAGE_LIST; do ./Rscript --vanilla -e "install.packages('$PKG', repos=c('https://cran.hafro.is/'))"; done
./Rscript --vanilla -e "devtools::install_github('rstudio/shinyapps')"
#+END_SRC

* Sync machines

This will synchronize the scripts to vm1, a server I run.  Other servers could be added.

#+BEGIN_SRC shell :results silent
rsync -avz --delete --times scripts vm1:
#+END_SRC

* Remote machines

The best way to arrange actually running the scripts on the remote servers is probably to specify a section for each one and specify each script that will be run.

** vm1

#+BEGIN_SRC shell :dir /vm1:scripts/ :results output
./install-r-from-source.sh
#+END_SRC

#+RESULTS:
